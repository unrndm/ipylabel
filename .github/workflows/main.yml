name: Build

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - "*"

jobs:
  # job to test, build and upload resulting packages as artifact
  test_and_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # setup node
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Setup npm cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      # setup python
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: "x64"

      - name: Setup pip cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: pip-3.7-${{ hashFiles('package.json') }}
          restore-keys: |
            pip-3.7-
            pip-

      # install locally
      - name: Install dependencies
        run: |
          python -m pip install -U pip setuptools codecov
          npm install -g codecov

      # test
      - name: Test the extension
        run: |
          python -m pip install --upgrade -v -e ".[test, examples, docs]"
          npm run lint:check
          pytest
          npm run test

      - name: Check docs can be build + links
        run: |
          sudo apt update
          sudo apt install -y pandoc
          pushd docs
          make html
          python -m pytest --check-links
          popd
      
      # build
      - name: Build python packages
        run: |
          python -m pip install build twine
          python -m build
          python -m twine check dist/*.{whl,tar.gz}
      
      - name: Create node packages
        run: |
          npm pack
        
      # upload
      - name: upload python package as artifact
        uses: actions/upload-artifact@v3
        with:
          name: python-artifacts
          path: dist/*.{whl,tar.gz}
      
      - name: upload node tarball as artifact
        uses: actions/upload-artifact@v3
        with:
          name: node-artifacts
          path: ./ipylabel-*.tgz

  # publish packages to respective repos
  ## publish python package
  publish_python_package:
    runs-on: ubuntu-latest
    needs:
      - test_and_build
    steps:
      - name: download python package as artifact
        uses: actions/download-artifact@v3
        with:
          name: python-artifacts
      
      - name: Publish a python package to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish a python package to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
  
  ## publish node package  
  publish_node_package:
    runs-on: ubuntu-latest
    needs:
      - test_and_build
    steps:
      - name: download node tarball as artifact
        uses: download/download-artifact@v3
        with:
          name: node-artifacts

      - name: Publish a node package to npm
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}

      - name: Publish a node package to github packages for node packages
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          registry: https://npm.pkg.github.com/
          tag: next
